[
  {
    "objectID": "content/01_journal/01_tidyverse.html",
    "href": "content/01_journal/01_tidyverse.html",
    "title": "Tidyverse",
    "section": "",
    "text": "library(tidyverse)\nlibrary(readxl)\n\n\n\n\n\nbikeshops_tbl &lt;- read_excel(\"D:\\\\Corinna\\\\TUHH\\\\SoSe2023\\\\BusinessDataBasics\\\\ss23-bdsb-CorinnaB123\\\\Data\\\\bikeshops.xlsx\")\norderlines_tbl &lt;- read_excel(\"D:\\\\Corinna\\\\TUHH\\\\SoSe2023\\\\BusinessDataBasics\\\\ss23-bdsb-CorinnaB123\\\\Data\\\\orderlines.xlsx\")\n\n#&gt; New names:\n#&gt; • `` -&gt; `...1`\n\nbikes_tbl  &lt;- read_excel(\"D:\\\\Corinna\\\\TUHH\\\\SoSe2023\\\\BusinessDataBasics\\\\ss23-bdsb-CorinnaB123\\\\Data\\\\bikes.xlsx\")\n\n\n\n\n\nbike_orderlines_joined_tbl &lt;- orderlines_tbl %&gt;%\n    left_join(bikes_tbl, by = c(\"product.id\" = \"bike.id\")) %&gt;%\n    left_join(bikeshops_tbl, by = c(\"customer.id\" = \"bikeshop.id\"))\n\n\n\n\n\nconflicts_prefer(magrittr::set_names)\n\n#&gt; [conflicted] Will prefer magrittr::set_names over any other package.\n\nbike_orderlines_wrangled_tbl &lt;- bike_orderlines_joined_tbl %&gt;%\n  #separate\n  separate(col    = location,\n          into   = c(\"city\", \"state\"),\n          sep    = \", \") %&gt;%\n  #Add the total price\n   mutate(total.price = price * quantity) %&gt;%\n  #Rename\n  rename(bikeshop = name) %&gt;%\n          set_names(names(.) %&gt;% str_replace_all(\"\\\\.\", \"_\"))\n\n\n\n\n\n library(lubridate)\n#Manipulate\n sales_by_state_tbl &lt;- bike_orderlines_wrangled_tbl %&gt;%\n    # Select columns\n   select(state, total_price) %&gt;%\n   # Grouping by state and summarizing sales\n   group_by(state) %&gt;% \n        summarize(sales = sum(total_price)) %&gt;%\n   #Add a column that turns the numbers into a currency format\n   mutate(sales_text = scales::dollar(sales, big.mark = \".\", \n                                     decimal.mark = \",\", \n                                     prefix = \"\", \n                                     suffix = \" €\"))\n\n    sales_by_state_tbl\n\n\n\n  \n\n\n\n\n # Visualize the data\n        sales_by_state_tbl %&gt;%\n          \n          # Setup canvas with the columns year (x-axis) and sales (y-axis)\n          ggplot(aes(x = state, y = sales)) +\n          \n          \n          # Geometries\n          geom_col(fill = \"#2DC6D6\") + \n          geom_label(aes(label = sales_text)) +\n          \n          # Hint\n          theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n          theme(axis.text.y = element_text(angle = 45, hjust = 1)) +\n          \n          # Formatting\n          scale_y_continuous(labels = scales::dollar_format(big.mark = \".\", \n                                                            decimal.mark = \",\", \n                                                            prefix = \"\", \n                                                            suffix = \" €\")) +\n          labs(\n            title    = \"Revenue by state\",\n            x = \"States\",\n            y = \"Revenue\"\n          )\n\n\n\n\n\n\n\n\n\n # Sales by State and Year ----\nconflicts_prefer(lubridate::year)\n\n#&gt; [conflicted] Will prefer lubridate::year over any other package.\n\n      # Manipulate\n\n          sales_by_state_year_tbl &lt;- bike_orderlines_wrangled_tbl %&gt;%\n  \n      # Select columns and add the a year\n          select(order_date, total_price, state) %&gt;%\n          mutate(year = year(order_date)) %&gt;%\n  \n      # Group by and summarize year and state\n          group_by(year, state) %&gt;%\n          summarise(sales = sum(total_price)) %&gt;%\n          ungroup() %&gt;%\n  \n      # Format\n          mutate(sales_text = scales::dollar(sales, big.mark = \".\", \n                                     decimal.mark = \",\", \n                                     prefix = \"\", \n                                     suffix = \" €\"))\n\n#&gt; `summarise()` has grouped output by 'year'. You can override using the\n#&gt; `.groups` argument.\n\nsales_by_state_year_tbl\n\n\n\n  \n\n\n\n\n # Visualize the data\n          sales_by_state_year_tbl %&gt;%\n  \n        # Set up x, y, fill\n          ggplot(aes(x = year, y = sales, fill = state)) +\n  \n        # Geometries\n          geom_col() + \n  \n        # Facet\n          facet_wrap(~ state) +\n  \n        # Formatting\n          scale_y_continuous(labels = scales::dollar_format(big.mark = \".\", \n                                                    decimal.mark = \",\", \n                                                    prefix = \"\", \n                                                    suffix = \" €\")) +\n          labs(\n                title = \"Revenue by state and year\",\n                fill = \"States\"\n              )"
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html#load-librarys",
    "href": "content/01_journal/01_tidyverse.html#load-librarys",
    "title": "Tidyverse",
    "section": "",
    "text": "library(tidyverse)\nlibrary(readxl)"
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html#import-data",
    "href": "content/01_journal/01_tidyverse.html#import-data",
    "title": "Tidyverse",
    "section": "",
    "text": "bikeshops_tbl &lt;- read_excel(\"D:\\\\Corinna\\\\TUHH\\\\SoSe2023\\\\BusinessDataBasics\\\\ss23-bdsb-CorinnaB123\\\\Data\\\\bikeshops.xlsx\")\norderlines_tbl &lt;- read_excel(\"D:\\\\Corinna\\\\TUHH\\\\SoSe2023\\\\BusinessDataBasics\\\\ss23-bdsb-CorinnaB123\\\\Data\\\\orderlines.xlsx\")\n\n#&gt; New names:\n#&gt; • `` -&gt; `...1`\n\nbikes_tbl  &lt;- read_excel(\"D:\\\\Corinna\\\\TUHH\\\\SoSe2023\\\\BusinessDataBasics\\\\ss23-bdsb-CorinnaB123\\\\Data\\\\bikes.xlsx\")"
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html#joining-data",
    "href": "content/01_journal/01_tidyverse.html#joining-data",
    "title": "Tidyverse",
    "section": "",
    "text": "bike_orderlines_joined_tbl &lt;- orderlines_tbl %&gt;%\n    left_join(bikes_tbl, by = c(\"product.id\" = \"bike.id\")) %&gt;%\n    left_join(bikeshops_tbl, by = c(\"customer.id\" = \"bikeshop.id\"))"
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html#wrangling-data",
    "href": "content/01_journal/01_tidyverse.html#wrangling-data",
    "title": "Tidyverse",
    "section": "",
    "text": "conflicts_prefer(magrittr::set_names)\n\n#&gt; [conflicted] Will prefer magrittr::set_names over any other package.\n\nbike_orderlines_wrangled_tbl &lt;- bike_orderlines_joined_tbl %&gt;%\n  #separate\n  separate(col    = location,\n          into   = c(\"city\", \"state\"),\n          sep    = \", \") %&gt;%\n  #Add the total price\n   mutate(total.price = price * quantity) %&gt;%\n  #Rename\n  rename(bikeshop = name) %&gt;%\n          set_names(names(.) %&gt;% str_replace_all(\"\\\\.\", \"_\"))"
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html#business-insights",
    "href": "content/01_journal/01_tidyverse.html#business-insights",
    "title": "Tidyverse",
    "section": "",
    "text": "library(lubridate)\n#Manipulate\n sales_by_state_tbl &lt;- bike_orderlines_wrangled_tbl %&gt;%\n    # Select columns\n   select(state, total_price) %&gt;%\n   # Grouping by state and summarizing sales\n   group_by(state) %&gt;% \n        summarize(sales = sum(total_price)) %&gt;%\n   #Add a column that turns the numbers into a currency format\n   mutate(sales_text = scales::dollar(sales, big.mark = \".\", \n                                     decimal.mark = \",\", \n                                     prefix = \"\", \n                                     suffix = \" €\"))\n\n    sales_by_state_tbl\n\n\n\n  \n\n\n\n\n # Visualize the data\n        sales_by_state_tbl %&gt;%\n          \n          # Setup canvas with the columns year (x-axis) and sales (y-axis)\n          ggplot(aes(x = state, y = sales)) +\n          \n          \n          # Geometries\n          geom_col(fill = \"#2DC6D6\") + \n          geom_label(aes(label = sales_text)) +\n          \n          # Hint\n          theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n          theme(axis.text.y = element_text(angle = 45, hjust = 1)) +\n          \n          # Formatting\n          scale_y_continuous(labels = scales::dollar_format(big.mark = \".\", \n                                                            decimal.mark = \",\", \n                                                            prefix = \"\", \n                                                            suffix = \" €\")) +\n          labs(\n            title    = \"Revenue by state\",\n            x = \"States\",\n            y = \"Revenue\"\n          )\n\n\n\n\n\n\n\n\n\n # Sales by State and Year ----\nconflicts_prefer(lubridate::year)\n\n#&gt; [conflicted] Will prefer lubridate::year over any other package.\n\n      # Manipulate\n\n          sales_by_state_year_tbl &lt;- bike_orderlines_wrangled_tbl %&gt;%\n  \n      # Select columns and add the a year\n          select(order_date, total_price, state) %&gt;%\n          mutate(year = year(order_date)) %&gt;%\n  \n      # Group by and summarize year and state\n          group_by(year, state) %&gt;%\n          summarise(sales = sum(total_price)) %&gt;%\n          ungroup() %&gt;%\n  \n      # Format\n          mutate(sales_text = scales::dollar(sales, big.mark = \".\", \n                                     decimal.mark = \",\", \n                                     prefix = \"\", \n                                     suffix = \" €\"))\n\n#&gt; `summarise()` has grouped output by 'year'. You can override using the\n#&gt; `.groups` argument.\n\nsales_by_state_year_tbl\n\n\n\n  \n\n\n\n\n # Visualize the data\n          sales_by_state_year_tbl %&gt;%\n  \n        # Set up x, y, fill\n          ggplot(aes(x = year, y = sales, fill = state)) +\n  \n        # Geometries\n          geom_col() + \n  \n        # Facet\n          facet_wrap(~ state) +\n  \n        # Formatting\n          scale_y_continuous(labels = scales::dollar_format(big.mark = \".\", \n                                                    decimal.mark = \",\", \n                                                    prefix = \"\", \n                                                    suffix = \" €\")) +\n          labs(\n                title = \"Revenue by state and year\",\n                fill = \"States\"\n              )"
  },
  {
    "objectID": "content/01_journal/02_data_acquisition.html",
    "href": "content/01_journal/02_data_acquisition.html",
    "title": "Data Acquisition",
    "section": "",
    "text": "library(conflicted)\nlibrary(dplyr)\nlibrary(tidyverse) \n\n#&gt; ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#&gt; ✔ forcats   1.0.0     ✔ readr     2.1.4\n#&gt; ✔ ggplot2   3.4.2     ✔ stringr   1.5.0\n#&gt; ✔ lubridate 1.9.2     ✔ tibble    3.2.1\n#&gt; ✔ purrr     1.0.1     ✔ tidyr     1.3.0\n\nlibrary(rvest)    \nlibrary(xopen) \nlibrary(httr)\nlibrary(glue)      \nlibrary(stringi)\nlibrary(jsonlite)\nlibrary(magrittr)\n\n\n\n\n\n\n\nconflicts_prefer(jsonlite::fromJSON)\n\n#&gt; [conflicted] Will prefer jsonlite::fromJSON over any other package.\n\nres = GET(\"https://api.open-meteo.com/v1/forecast?latitude=53.55&longitude=9.99&daily=temperature_2m_max,temperature_2m_min,uv_index_max,precipitation_sum&timezone=auto\")\ndata = fromJSON(rawToChar(res$content))\nnames(data)\n\n#&gt; [1] \"latitude\"              \"longitude\"             \"generationtime_ms\"    \n#&gt; [4] \"utc_offset_seconds\"    \"timezone\"              \"timezone_abbreviation\"\n#&gt; [7] \"elevation\"             \"daily_units\"           \"daily\"\n\ndata$daily\n\n#&gt; $time\n#&gt; [1] \"2023-05-24\" \"2023-05-25\" \"2023-05-26\" \"2023-05-27\" \"2023-05-28\"\n#&gt; [6] \"2023-05-29\" \"2023-05-30\"\n#&gt; \n#&gt; $temperature_2m_max\n#&gt; [1] 17.8 17.5 15.8 19.0 18.1 17.5 16.9\n#&gt; \n#&gt; $temperature_2m_min\n#&gt; [1] 9.1 9.7 6.9 7.5 9.5 5.8 8.5\n#&gt; \n#&gt; $uv_index_max\n#&gt; [1] 5.60 6.55 6.50 6.50 6.05 3.55 6.15\n#&gt; \n#&gt; $precipitation_sum\n#&gt; [1] 1.0 0.0 0.0 0.0 0.0 0.0 0.3\n\n\n\n\n\n\nWeather_list &lt;- fromJSON(rawToChar(res$content), flatten = TRUE)\ndf &lt;- Weather_list$daily\nclass(df)\n\n#&gt; [1] \"list\"\n\nhead(df)\n\n#&gt; $time\n#&gt; [1] \"2023-05-24\" \"2023-05-25\" \"2023-05-26\" \"2023-05-27\" \"2023-05-28\"\n#&gt; [6] \"2023-05-29\" \"2023-05-30\"\n#&gt; \n#&gt; $temperature_2m_max\n#&gt; [1] 17.8 17.5 15.8 19.0 18.1 17.5 16.9\n#&gt; \n#&gt; $temperature_2m_min\n#&gt; [1] 9.1 9.7 6.9 7.5 9.5 5.8 8.5\n#&gt; \n#&gt; $uv_index_max\n#&gt; [1] 5.60 6.55 6.50 6.50 6.05 3.55 6.15\n#&gt; \n#&gt; $precipitation_sum\n#&gt; [1] 1.0 0.0 0.0 0.0 0.0 0.0 0.3\n\nWeather_forecast = as.data.frame(df)\nWeather_forecast\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n#3.2\nurl_home &lt;- \"https://www.rosebikes.com/bikes\"\nbikes_home &lt;- url_home %&gt;%\n  read_html()\n\nbike_family_tbl &lt;- bikes_home %&gt;%\n  html_nodes(css = \".catalog-navigation__link\")%&gt;%\n  html_attr('title') %&gt;%\n  discard(.p = ~stringr::str_detect(.x, \"Bikes with short delivery times\"))%&gt;%\n  enframe(name = \"position\", value = \"family_class\") %&gt;%\n  mutate(family_id = str_glue(\"#{family_class}\"))%&gt;%\n  mutate(url = glue(\"https://www.rosebikes.com/bikes/{family_class}\"))\n\nbike_family_tbl\n\n\n\n  \n\n\n\n\n\n\n\nbike_category_url &lt;- bike_family_tbl$url[1]\nhtml_bike_category &lt;- read_html(bike_category_url)\n\nget_bike_data &lt;- function(url){\n \n  html_bike_category &lt;- read_html(url)\n  bike_category_url &lt;- bike_family_tbl$url[1]\n  html_bike_category &lt;- read_html(bike_category_url)\n \n  #urls\n  bike_url_tbl &lt;- html_bike_category %&gt;%\n    html_nodes(css =\".catalog-category-bikes__button\") %&gt;%\n    html_attr(\"href\") %&gt;%\n    str_remove(pattern = \"\\\\?.*\") %&gt;%\n    enframe(name = \"position\",value = \"part_url\") %&gt;%\n    mutate(url = glue(\"https://www.rosebikes.com{part_url}\"))\n  bike_url_tbl\n \n  #Bike Names\n  bike_name_tbl &lt;- html_bike_category %&gt;%\n    html_nodes(\".basic-headline__title\") %&gt;%\n    html_text() %&gt;%\n    str_remove(pattern = \"\\\\n\") %&gt;%\n    str_remove(pattern = \"\\\"\") %&gt;%\n    enframe(name = \"position\", value = \"Name\")\n  bike_name_tbl\n \n  #descriptions\n  bike_desc_tbl &lt;- html_bike_category %&gt;%\n    html_nodes(\".catalog-category-bikes__content-subtitle\") %&gt;%\n    html_text() %&gt;%\n    str_remove(pattern = \"\\\\n\") %&gt;%\n    str_remove(pattern = \"\\\"\") %&gt;%\n    enframe(name = \"position\", value = \"Description\")\n \n  #prices\n  bike_price_tbl &lt;- html_bike_category %&gt;%\n    html_nodes(\".catalog-category-bikes__price-title\") %&gt;%\n    html_text() %&gt;%\n    str_remove(pattern = \"\\\\n\") %&gt;%\n    str_remove(pattern = \"\\\"\") %&gt;%\n    enframe(name = \"position\", value = \"Price\") %&gt;%\n    left_join(bike_desc_tbl, by = character()) %&gt;%\n    left_join(bike_name_tbl, by = character()) %&gt;%\n    left_join(bike_url_tbl, by = character()) %&gt;%\n    select(Name, url, Description, Price) %&gt;%\n    as_tibble()\n  bike_price_tbl\n}\n\n\n\n\n\nrose_bike_data_tbl &lt;- tibble()\nfor(i in seq_along(bike_family_tbl$url)){\n  bike_category_url &lt;- bike_family_tbl$url[i]\n  rose_bike_data_tbl &lt;- bind_rows(rose_bike_data_tbl, get_bike_data(bike_category_url))\n  Sys.sleep(5)\n  print(i)\n}\n\n#&gt; Warning: Using `by = character()` to perform a cross join was deprecated in dplyr 1.1.0.\n#&gt; ℹ Please use `cross_join()` instead.\n\n\n#&gt; [1] 1\n#&gt; [1] 2\n#&gt; [1] 3\n#&gt; [1] 4\n#&gt; [1] 5\n#&gt; [1] 6\n#&gt; [1] 7\n\n\n\n\n\n\nprint(rose_bike_data_tbl, n=20)\n\n#&gt; # A tibble: 50,176 × 4\n#&gt;    Name          url                                           Description Price\n#&gt;    &lt;chr&gt;         &lt;glue&gt;                                        &lt;chr&gt;       &lt;chr&gt;\n#&gt;  1 MTB           https://www.rosebikes.com/bikes/mtb/cross-co… \"         … \"   …\n#&gt;  2 MTB           https://www.rosebikes.com/bikes/mtb/cross-co… \"         … \"   …\n#&gt;  3 MTB           https://www.rosebikes.com/bikes/mtb/cross-co… \"         … \"   …\n#&gt;  4 MTB           https://www.rosebikes.com/bikes/mtb/trail-/-… \"         … \"   …\n#&gt;  5 MTB           https://www.rosebikes.com/bikes/mtb/trail-/-… \"         … \"   …\n#&gt;  6 MTB           https://www.rosebikes.com/bikes/mtb/trail-/-… \"         … \"   …\n#&gt;  7 MTB           https://www.rosebikes.com/bikes/mtb/freeride… \"         … \"   …\n#&gt;  8 MTB           https://www.rosebikes.com/bikes/mtb/dirt/the… \"         … \"   …\n#&gt;  9 Cross Country https://www.rosebikes.com/bikes/mtb/cross-co… \"         … \"   …\n#&gt; 10 Cross Country https://www.rosebikes.com/bikes/mtb/cross-co… \"         … \"   …\n#&gt; 11 Cross Country https://www.rosebikes.com/bikes/mtb/cross-co… \"         … \"   …\n#&gt; 12 Cross Country https://www.rosebikes.com/bikes/mtb/trail-/-… \"         … \"   …\n#&gt; 13 Cross Country https://www.rosebikes.com/bikes/mtb/trail-/-… \"         … \"   …\n#&gt; 14 Cross Country https://www.rosebikes.com/bikes/mtb/trail-/-… \"         … \"   …\n#&gt; 15 Cross Country https://www.rosebikes.com/bikes/mtb/freeride… \"         … \"   …\n#&gt; 16 Cross Country https://www.rosebikes.com/bikes/mtb/dirt/the… \"         … \"   …\n#&gt; 17 COUNT SOLO    https://www.rosebikes.com/bikes/mtb/cross-co… \"         … \"   …\n#&gt; 18 COUNT SOLO    https://www.rosebikes.com/bikes/mtb/cross-co… \"         … \"   …\n#&gt; 19 COUNT SOLO    https://www.rosebikes.com/bikes/mtb/cross-co… \"         … \"   …\n#&gt; 20 COUNT SOLO    https://www.rosebikes.com/bikes/mtb/trail-/-… \"         … \"   …\n#&gt; # ℹ 50,156 more rows\n\nglimpse(rose_bike_data_tbl)\n\n#&gt; Rows: 50,176\n#&gt; Columns: 4\n#&gt; $ Name        &lt;chr&gt; \"MTB\", \"MTB\", \"MTB\", \"MTB\", \"MTB\", \"MTB\", \"MTB\", \"MTB\", \"C…\n#&gt; $ url         &lt;glue&gt; \"https://www.rosebikes.com/bikes/mtb/cross-country/count-…\n#&gt; $ Description &lt;chr&gt; \"            The best-selling hardtail for off-road and ca…\n#&gt; $ Price       &lt;chr&gt; \"                                                from €749…"
  },
  {
    "objectID": "content/01_journal/02_data_acquisition.html#load-librarys",
    "href": "content/01_journal/02_data_acquisition.html#load-librarys",
    "title": "Data Acquisition",
    "section": "",
    "text": "library(conflicted)\nlibrary(dplyr)\nlibrary(tidyverse) \n\n#&gt; ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#&gt; ✔ forcats   1.0.0     ✔ readr     2.1.4\n#&gt; ✔ ggplot2   3.4.2     ✔ stringr   1.5.0\n#&gt; ✔ lubridate 1.9.2     ✔ tibble    3.2.1\n#&gt; ✔ purrr     1.0.1     ✔ tidyr     1.3.0\n\nlibrary(rvest)    \nlibrary(xopen) \nlibrary(httr)\nlibrary(glue)      \nlibrary(stringi)\nlibrary(jsonlite)\nlibrary(magrittr)"
  },
  {
    "objectID": "content/01_journal/02_data_acquisition.html#part-1",
    "href": "content/01_journal/02_data_acquisition.html#part-1",
    "title": "Data Acquisition",
    "section": "",
    "text": "conflicts_prefer(jsonlite::fromJSON)\n\n#&gt; [conflicted] Will prefer jsonlite::fromJSON over any other package.\n\nres = GET(\"https://api.open-meteo.com/v1/forecast?latitude=53.55&longitude=9.99&daily=temperature_2m_max,temperature_2m_min,uv_index_max,precipitation_sum&timezone=auto\")\ndata = fromJSON(rawToChar(res$content))\nnames(data)\n\n#&gt; [1] \"latitude\"              \"longitude\"             \"generationtime_ms\"    \n#&gt; [4] \"utc_offset_seconds\"    \"timezone\"              \"timezone_abbreviation\"\n#&gt; [7] \"elevation\"             \"daily_units\"           \"daily\"\n\ndata$daily\n\n#&gt; $time\n#&gt; [1] \"2023-05-24\" \"2023-05-25\" \"2023-05-26\" \"2023-05-27\" \"2023-05-28\"\n#&gt; [6] \"2023-05-29\" \"2023-05-30\"\n#&gt; \n#&gt; $temperature_2m_max\n#&gt; [1] 17.8 17.5 15.8 19.0 18.1 17.5 16.9\n#&gt; \n#&gt; $temperature_2m_min\n#&gt; [1] 9.1 9.7 6.9 7.5 9.5 5.8 8.5\n#&gt; \n#&gt; $uv_index_max\n#&gt; [1] 5.60 6.55 6.50 6.50 6.05 3.55 6.15\n#&gt; \n#&gt; $precipitation_sum\n#&gt; [1] 1.0 0.0 0.0 0.0 0.0 0.0 0.3\n\n\n\n\n\n\nWeather_list &lt;- fromJSON(rawToChar(res$content), flatten = TRUE)\ndf &lt;- Weather_list$daily\nclass(df)\n\n#&gt; [1] \"list\"\n\nhead(df)\n\n#&gt; $time\n#&gt; [1] \"2023-05-24\" \"2023-05-25\" \"2023-05-26\" \"2023-05-27\" \"2023-05-28\"\n#&gt; [6] \"2023-05-29\" \"2023-05-30\"\n#&gt; \n#&gt; $temperature_2m_max\n#&gt; [1] 17.8 17.5 15.8 19.0 18.1 17.5 16.9\n#&gt; \n#&gt; $temperature_2m_min\n#&gt; [1] 9.1 9.7 6.9 7.5 9.5 5.8 8.5\n#&gt; \n#&gt; $uv_index_max\n#&gt; [1] 5.60 6.55 6.50 6.50 6.05 3.55 6.15\n#&gt; \n#&gt; $precipitation_sum\n#&gt; [1] 1.0 0.0 0.0 0.0 0.0 0.0 0.3\n\nWeather_forecast = as.data.frame(df)\nWeather_forecast"
  },
  {
    "objectID": "content/01_journal/02_data_acquisition.html#part-2",
    "href": "content/01_journal/02_data_acquisition.html#part-2",
    "title": "Data Acquisition",
    "section": "",
    "text": "#3.2\nurl_home &lt;- \"https://www.rosebikes.com/bikes\"\nbikes_home &lt;- url_home %&gt;%\n  read_html()\n\nbike_family_tbl &lt;- bikes_home %&gt;%\n  html_nodes(css = \".catalog-navigation__link\")%&gt;%\n  html_attr('title') %&gt;%\n  discard(.p = ~stringr::str_detect(.x, \"Bikes with short delivery times\"))%&gt;%\n  enframe(name = \"position\", value = \"family_class\") %&gt;%\n  mutate(family_id = str_glue(\"#{family_class}\"))%&gt;%\n  mutate(url = glue(\"https://www.rosebikes.com/bikes/{family_class}\"))\n\nbike_family_tbl\n\n\n\n  \n\n\n\n\n\n\n\nbike_category_url &lt;- bike_family_tbl$url[1]\nhtml_bike_category &lt;- read_html(bike_category_url)\n\nget_bike_data &lt;- function(url){\n \n  html_bike_category &lt;- read_html(url)\n  bike_category_url &lt;- bike_family_tbl$url[1]\n  html_bike_category &lt;- read_html(bike_category_url)\n \n  #urls\n  bike_url_tbl &lt;- html_bike_category %&gt;%\n    html_nodes(css =\".catalog-category-bikes__button\") %&gt;%\n    html_attr(\"href\") %&gt;%\n    str_remove(pattern = \"\\\\?.*\") %&gt;%\n    enframe(name = \"position\",value = \"part_url\") %&gt;%\n    mutate(url = glue(\"https://www.rosebikes.com{part_url}\"))\n  bike_url_tbl\n \n  #Bike Names\n  bike_name_tbl &lt;- html_bike_category %&gt;%\n    html_nodes(\".basic-headline__title\") %&gt;%\n    html_text() %&gt;%\n    str_remove(pattern = \"\\\\n\") %&gt;%\n    str_remove(pattern = \"\\\"\") %&gt;%\n    enframe(name = \"position\", value = \"Name\")\n  bike_name_tbl\n \n  #descriptions\n  bike_desc_tbl &lt;- html_bike_category %&gt;%\n    html_nodes(\".catalog-category-bikes__content-subtitle\") %&gt;%\n    html_text() %&gt;%\n    str_remove(pattern = \"\\\\n\") %&gt;%\n    str_remove(pattern = \"\\\"\") %&gt;%\n    enframe(name = \"position\", value = \"Description\")\n \n  #prices\n  bike_price_tbl &lt;- html_bike_category %&gt;%\n    html_nodes(\".catalog-category-bikes__price-title\") %&gt;%\n    html_text() %&gt;%\n    str_remove(pattern = \"\\\\n\") %&gt;%\n    str_remove(pattern = \"\\\"\") %&gt;%\n    enframe(name = \"position\", value = \"Price\") %&gt;%\n    left_join(bike_desc_tbl, by = character()) %&gt;%\n    left_join(bike_name_tbl, by = character()) %&gt;%\n    left_join(bike_url_tbl, by = character()) %&gt;%\n    select(Name, url, Description, Price) %&gt;%\n    as_tibble()\n  bike_price_tbl\n}\n\n\n\n\n\nrose_bike_data_tbl &lt;- tibble()\nfor(i in seq_along(bike_family_tbl$url)){\n  bike_category_url &lt;- bike_family_tbl$url[i]\n  rose_bike_data_tbl &lt;- bind_rows(rose_bike_data_tbl, get_bike_data(bike_category_url))\n  Sys.sleep(5)\n  print(i)\n}\n\n#&gt; Warning: Using `by = character()` to perform a cross join was deprecated in dplyr 1.1.0.\n#&gt; ℹ Please use `cross_join()` instead.\n\n\n#&gt; [1] 1\n#&gt; [1] 2\n#&gt; [1] 3\n#&gt; [1] 4\n#&gt; [1] 5\n#&gt; [1] 6\n#&gt; [1] 7\n\n\n\n\n\n\nprint(rose_bike_data_tbl, n=20)\n\n#&gt; # A tibble: 50,176 × 4\n#&gt;    Name          url                                           Description Price\n#&gt;    &lt;chr&gt;         &lt;glue&gt;                                        &lt;chr&gt;       &lt;chr&gt;\n#&gt;  1 MTB           https://www.rosebikes.com/bikes/mtb/cross-co… \"         … \"   …\n#&gt;  2 MTB           https://www.rosebikes.com/bikes/mtb/cross-co… \"         … \"   …\n#&gt;  3 MTB           https://www.rosebikes.com/bikes/mtb/cross-co… \"         … \"   …\n#&gt;  4 MTB           https://www.rosebikes.com/bikes/mtb/trail-/-… \"         … \"   …\n#&gt;  5 MTB           https://www.rosebikes.com/bikes/mtb/trail-/-… \"         … \"   …\n#&gt;  6 MTB           https://www.rosebikes.com/bikes/mtb/trail-/-… \"         … \"   …\n#&gt;  7 MTB           https://www.rosebikes.com/bikes/mtb/freeride… \"         … \"   …\n#&gt;  8 MTB           https://www.rosebikes.com/bikes/mtb/dirt/the… \"         … \"   …\n#&gt;  9 Cross Country https://www.rosebikes.com/bikes/mtb/cross-co… \"         … \"   …\n#&gt; 10 Cross Country https://www.rosebikes.com/bikes/mtb/cross-co… \"         … \"   …\n#&gt; 11 Cross Country https://www.rosebikes.com/bikes/mtb/cross-co… \"         … \"   …\n#&gt; 12 Cross Country https://www.rosebikes.com/bikes/mtb/trail-/-… \"         … \"   …\n#&gt; 13 Cross Country https://www.rosebikes.com/bikes/mtb/trail-/-… \"         … \"   …\n#&gt; 14 Cross Country https://www.rosebikes.com/bikes/mtb/trail-/-… \"         … \"   …\n#&gt; 15 Cross Country https://www.rosebikes.com/bikes/mtb/freeride… \"         … \"   …\n#&gt; 16 Cross Country https://www.rosebikes.com/bikes/mtb/dirt/the… \"         … \"   …\n#&gt; 17 COUNT SOLO    https://www.rosebikes.com/bikes/mtb/cross-co… \"         … \"   …\n#&gt; 18 COUNT SOLO    https://www.rosebikes.com/bikes/mtb/cross-co… \"         … \"   …\n#&gt; 19 COUNT SOLO    https://www.rosebikes.com/bikes/mtb/cross-co… \"         … \"   …\n#&gt; 20 COUNT SOLO    https://www.rosebikes.com/bikes/mtb/trail-/-… \"         … \"   …\n#&gt; # ℹ 50,156 more rows\n\nglimpse(rose_bike_data_tbl)\n\n#&gt; Rows: 50,176\n#&gt; Columns: 4\n#&gt; $ Name        &lt;chr&gt; \"MTB\", \"MTB\", \"MTB\", \"MTB\", \"MTB\", \"MTB\", \"MTB\", \"MTB\", \"C…\n#&gt; $ url         &lt;glue&gt; \"https://www.rosebikes.com/bikes/mtb/cross-country/count-…\n#&gt; $ Description &lt;chr&gt; \"            The best-selling hardtail for off-road and ca…\n#&gt; $ Price       &lt;chr&gt; \"                                                from €749…"
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html",
    "href": "content/01_journal/03_data_wrangling.html",
    "title": "Data Wrangling",
    "section": "",
    "text": "knitr::opts_chunk$set(eval = FALSE)\n\nlibrary(conflicted)\nlibrary(tidyverse)\n\n#&gt; ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#&gt; ✔ dplyr     1.1.2     ✔ readr     2.1.4\n#&gt; ✔ forcats   1.0.0     ✔ stringr   1.5.0\n#&gt; ✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n#&gt; ✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n#&gt; ✔ purrr     1.0.1\n\nlibrary(vroom)\nlibrary(data.table)\nlibrary(furrr)\n\n#&gt; Lade nötiges Paket: future\n\nlibrary(tictoc)\nlibrary(readxl)\nlibrary(readr)\nlibrary(ggplot2)\nlibrary(dplyr)\nconflicts_prefer(vroom::col_character)\n\n#&gt; [conflicted] Will prefer vroom::col_character over any other package.\n\nconflicts_prefer(vroom::col_date)\n\n#&gt; [conflicted] Will prefer vroom::col_date over any other package.\n\nconflicts_prefer(vroom::col_double)\n\n#&gt; [conflicted] Will prefer vroom::col_double over any other package.\n\n\n\n\n\n\nassignee_col_types &lt;- list(\n  id = col_character(),\n  type = col_character(),\n  name_first = col_character(),\n  name_last = col_character(),\n  organization = col_character()\n)\n\nassignee_tbl &lt;- vroom(\n  file       = \"assignee.tsv\", \n  delim      = \"\\t\", \n  col_types  = assignee_col_types,\n  na         = c(\"\", \"NA\", \"NULL\")\n)\n\nassignee_clean_tbl &lt;- assignee_tbl %&gt;%\n  as_tibble() %&gt;%\n  rename(assignee_id = id) %&gt;%\n  select(assignee_id, type, organization)\n\nsetDT(assignee_clean_tbl)\nclass(assignee_clean_tbl)\n\npatent_assignee_col_types &lt;- list(\n  patent_id = col_character(),\n  assignee_id = col_character(),\n  location_id = col_character()\n)\n\npatent_assignee_tbl &lt;- vroom(\n  file       = \"patent_assignee.tsv\", \n  delim      = \"\\t\", \n  col_types  = patent_assignee_col_types,\n  na         = c(\"\", \"NA\", \"NULL\")\n)\n\n\npatent_assignee_clean_tbl &lt;- patent_assignee_tbl %&gt;%\n  as_tibble() %&gt;%\n  select(assignee_id, patent_id)\n\nsetDT(patent_assignee_clean_tbl)\nclass(patent_assignee_clean_tbl)\n\n\ncombined_data_1_tbl &lt;- merge(x = patent_assignee_clean_tbl, y = assignee_clean_tbl, \n                             by    = \"assignee_id\", \n                             all.x = TRUE, \n                             all.y = FALSE)\n\n\ncombined_data_1_cleaned_tbl &lt;- combined_data_1_tbl %&gt;%\n  select(patent_id, type, organization)\n\nsaveRDS(combined_data_1_cleaned_tbl, \"patent_1_cleaned_data_tbl.rds\")\n\nuspc_col_types &lt;- list(\n  uuid = col_character(),\n  patent_id = col_character(),\n  mainclass_id = col_character(),\n  subclass_id = col_character(),\n  sequence = col_character()\n)\n\n\nuspc_tbl &lt;- vroom(\n  file       = \"uspc.tsv\", \n  delim      = \"\\t\", \n  col_types  = uspc_col_types,\n  na         = c(\"\", \"NA\", \"NULL\")\n)\n\n\nuspc_clean_tbl &lt;- uspc_tbl %&gt;%\n  as_tibble() %&gt;%\n  select(patent_id, mainclass_id)\n\nsetDT(uspc_clean_tbl)\nclass(uspc_clean_tbl)\n\n\n\ncombined_data_2_tbl &lt;- merge(x = uspc_clean_tbl, y = combined_data_1_cleaned_tbl, \n                             by    = \"patent_id\", \n                             all.x = TRUE, \n                             all.y = FALSE)\n\ncombined_data_2_cleaned_tbl &lt;- combined_data_2_tbl %&gt;%\n  select(patent_id, type, organization,mainclass_id)\n\nsaveRDS(combined_data_2_cleaned_tbl, \"patent_2_cleaned_data_tbl.rds\")\n\ncol_types &lt;- list(\n  id = col_character(),\n  type = col_character(),\n  number = col_character(),\n  country = col_character(),\n  date = col_date(\"%Y-%m-%d\"),\n  month = col_character(),\n  abstract = col_character(),\n  title = col_character(),\n  kind = col_character(),\n  num_claims = col_double(),\n  filename = col_character(),\n  withdrawn = col_double()\n)\n\npatent_tbl &lt;- vroom(\n  file       = \"patent.tsv\", \n  delim      = \"\\t\", \n  col_types  = col_types,\n  na         = c(\"\", \"NA\", \"NULL\")\n)\n\npatent_clean_tbl &lt;- patent_tbl %&gt;%\n  as_tibble() %&gt;%\n  rename(patent_id = id) %&gt;%\n  select(patent_id, date)\n\nsetDT(patent_clean_tbl)\nclass(patent_clean_tbl)\n\n\ncombined_data_3_tbl &lt;- merge(x = patent_clean_tbl, y = combined_data_2_cleaned_tbl, \n                             by    = \"patent_id\", \n                             all.x = TRUE, \n                             all.y = FALSE)\n\n\ncombined_data_3_cleaned_tbl &lt;- combined_data_3_tbl %&gt;%\n  select(patent_id, type, date, organization, mainclass_id)\n\n\nsaveRDS(combined_data_3_cleaned_tbl, \"patent_3_cleaned_data_tbl.rds\")\n\n\nassignee_pa_p_uspc_data &lt;- readRDS(\"patent_3_cleaned_data_tbl.rds\")\n\nassignee_pa_p_uspc_data_tbl &lt;- as.data.table(assignee_pa_p_uspc_data)\n\n\nclean_try &lt;- assignee_pa_p_uspc_data[,year := lubridate::year(date)]\nsaveRDS(clean_try, \"patent_3_cleaned_data_with_year_tbl.rds\")\n\n\n\n\n\n#combination of assignee and patent_assignee datasets\nassignee_pa_data &lt;- readRDS(\"patent_1_cleaned_data_tbl.rds\")\nassignee_pa_data_tbl &lt;- as.data.table(assignee_pa_data)\nassignee_pa &lt;- assignee_pa_data_tbl[, .(COUNT = uniqueN(patent_id)), by = organization][order(-COUNT)]\nassignee_pa_clean &lt;- assignee_pa[-c(4)]\nassignment_1_result &lt;- head(assignee_pa_clean, 10)\nview(assignment_1_result)\nsaveRDS(assignment_1_result, \"result_1.rds\")\n\n\n\n#combination of assignee, patent_assignee, patent, and uspc datasets\n\nassignee_pa_p_uspc_with_year_data &lt;- readRDS(\"patent_3_cleaned_data_with_year_tbl.rds\")\nassignee_pa_p_uspc_data_with_year_tbl &lt;- as.data.table(assignee_pa_p_uspc_with_year_data)\nglimpse(assignee_pa_p_uspc_data_with_year_tbl)\nassignee_pa_p_uspc_final_tbl &lt;- assignee_pa_p_uspc_data_with_year_tbl[date &gt;= \"2014-08-01 & &lt;= 2014-08-31\", .(COUNT = uniqueN(patent_id)), by = organization][order(-COUNT)]\nassignee_pa_p_uspc_final_tbl\nassignee_pa_p_uspc_final_tbl_clean &lt;- assignee_pa_p_uspc_final_tbl[-c(1)]\nassignment_2_result &lt;- head(assignee_pa_p_uspc_final_tbl_clean, 10)\nassignment_2_result\nsaveRDS(assignment_2_result, \"result_2.rds\")\n\n\n\n#combination of assignee, patent_assignee, and uspc datasets\nassignee_pa_uspc_data &lt;- readRDS(\"patent_2_cleaned_data_tbl.rds\")\nassignee_pa_uspc_data_tbl &lt;- as.data.table(assignee_pa_uspc_data)\nglimpse(assignee_pa_uspc_data_tbl)\nassignee_pa_uspc_final_tbl &lt;- assignee_pa_uspc_data_tbl[, .(COUNT = uniqueN(patent_id)), by = .(organization, type)][order(-COUNT)]\n\n\nassignee_pa_uspc_clean &lt;- assignee_pa_uspc_final_tbl[-c(1)]\nassignment_3a_result &lt;- head(assignee_pa_uspc_clean, 10)\nassignment_3a_result\nsaveRDS(assignment_3a_result, \"result_3_1.rds\")\n\n\nassignee_pa_uspc_final_3b_tbl &lt;- assignee_pa_uspc_data_tbl[, .(COUNT = .N), by = type][order(-COUNT)]\nassignee_pa_uspc_3b_clean &lt;- assignee_pa_uspc_final_3b_tbl[-c(3)]\nassignment_3b_result &lt;- head(assignee_pa_uspc_3b_clean, 5)\nassignment_3b_result$patent_type &lt;- c(\"US Company or Corporation\", \"Foreign Company or Corporation\", \"US  Federal Government\", \"US Individual\", \"Foreign Individual\")\nassignment_3b_result\nsaveRDS(assignment_3b_result, \"result_3_2.rds\")\n\n\n\n\n\n#Question 1:\n#List the 10 US companies with the most assigned/granted patents\nresult_1&lt;- readRDS(\"result_1.rds\")\nprint(result_1)\n\n#Question 2:\n#List the top 10 companies with the most new granted patents for August 2014.\nresult_2 &lt;- readRDS(\"result_2.rds\")\nprint(result_2)\n\n#Question 3:\n#What is the most innovative tech sector? For the top 10 companies (worldwide) with the most patents\nresult_3_1 &lt;- readRDS(\"result_3_1.rds\")\nprint(result_3_1)\n\n#Top 5 USPTO tech main classes\nresult_3_2 &lt;- readRDS(\"result_3_2.rds\")\nprint(result_3_2)"
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html#load-librarys",
    "href": "content/01_journal/03_data_wrangling.html#load-librarys",
    "title": "Data Wrangling",
    "section": "",
    "text": "knitr::opts_chunk$set(eval = FALSE)\n\nlibrary(conflicted)\nlibrary(tidyverse)\n\n#&gt; ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#&gt; ✔ dplyr     1.1.2     ✔ readr     2.1.4\n#&gt; ✔ forcats   1.0.0     ✔ stringr   1.5.0\n#&gt; ✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n#&gt; ✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n#&gt; ✔ purrr     1.0.1\n\nlibrary(vroom)\nlibrary(data.table)\nlibrary(furrr)\n\n#&gt; Lade nötiges Paket: future\n\nlibrary(tictoc)\nlibrary(readxl)\nlibrary(readr)\nlibrary(ggplot2)\nlibrary(dplyr)\nconflicts_prefer(vroom::col_character)\n\n#&gt; [conflicted] Will prefer vroom::col_character over any other package.\n\nconflicts_prefer(vroom::col_date)\n\n#&gt; [conflicted] Will prefer vroom::col_date over any other package.\n\nconflicts_prefer(vroom::col_double)\n\n#&gt; [conflicted] Will prefer vroom::col_double over any other package."
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html#get-data",
    "href": "content/01_journal/03_data_wrangling.html#get-data",
    "title": "Data Wrangling",
    "section": "",
    "text": "assignee_col_types &lt;- list(\n  id = col_character(),\n  type = col_character(),\n  name_first = col_character(),\n  name_last = col_character(),\n  organization = col_character()\n)\n\nassignee_tbl &lt;- vroom(\n  file       = \"assignee.tsv\", \n  delim      = \"\\t\", \n  col_types  = assignee_col_types,\n  na         = c(\"\", \"NA\", \"NULL\")\n)\n\nassignee_clean_tbl &lt;- assignee_tbl %&gt;%\n  as_tibble() %&gt;%\n  rename(assignee_id = id) %&gt;%\n  select(assignee_id, type, organization)\n\nsetDT(assignee_clean_tbl)\nclass(assignee_clean_tbl)\n\npatent_assignee_col_types &lt;- list(\n  patent_id = col_character(),\n  assignee_id = col_character(),\n  location_id = col_character()\n)\n\npatent_assignee_tbl &lt;- vroom(\n  file       = \"patent_assignee.tsv\", \n  delim      = \"\\t\", \n  col_types  = patent_assignee_col_types,\n  na         = c(\"\", \"NA\", \"NULL\")\n)\n\n\npatent_assignee_clean_tbl &lt;- patent_assignee_tbl %&gt;%\n  as_tibble() %&gt;%\n  select(assignee_id, patent_id)\n\nsetDT(patent_assignee_clean_tbl)\nclass(patent_assignee_clean_tbl)\n\n\ncombined_data_1_tbl &lt;- merge(x = patent_assignee_clean_tbl, y = assignee_clean_tbl, \n                             by    = \"assignee_id\", \n                             all.x = TRUE, \n                             all.y = FALSE)\n\n\ncombined_data_1_cleaned_tbl &lt;- combined_data_1_tbl %&gt;%\n  select(patent_id, type, organization)\n\nsaveRDS(combined_data_1_cleaned_tbl, \"patent_1_cleaned_data_tbl.rds\")\n\nuspc_col_types &lt;- list(\n  uuid = col_character(),\n  patent_id = col_character(),\n  mainclass_id = col_character(),\n  subclass_id = col_character(),\n  sequence = col_character()\n)\n\n\nuspc_tbl &lt;- vroom(\n  file       = \"uspc.tsv\", \n  delim      = \"\\t\", \n  col_types  = uspc_col_types,\n  na         = c(\"\", \"NA\", \"NULL\")\n)\n\n\nuspc_clean_tbl &lt;- uspc_tbl %&gt;%\n  as_tibble() %&gt;%\n  select(patent_id, mainclass_id)\n\nsetDT(uspc_clean_tbl)\nclass(uspc_clean_tbl)\n\n\n\ncombined_data_2_tbl &lt;- merge(x = uspc_clean_tbl, y = combined_data_1_cleaned_tbl, \n                             by    = \"patent_id\", \n                             all.x = TRUE, \n                             all.y = FALSE)\n\ncombined_data_2_cleaned_tbl &lt;- combined_data_2_tbl %&gt;%\n  select(patent_id, type, organization,mainclass_id)\n\nsaveRDS(combined_data_2_cleaned_tbl, \"patent_2_cleaned_data_tbl.rds\")\n\ncol_types &lt;- list(\n  id = col_character(),\n  type = col_character(),\n  number = col_character(),\n  country = col_character(),\n  date = col_date(\"%Y-%m-%d\"),\n  month = col_character(),\n  abstract = col_character(),\n  title = col_character(),\n  kind = col_character(),\n  num_claims = col_double(),\n  filename = col_character(),\n  withdrawn = col_double()\n)\n\npatent_tbl &lt;- vroom(\n  file       = \"patent.tsv\", \n  delim      = \"\\t\", \n  col_types  = col_types,\n  na         = c(\"\", \"NA\", \"NULL\")\n)\n\npatent_clean_tbl &lt;- patent_tbl %&gt;%\n  as_tibble() %&gt;%\n  rename(patent_id = id) %&gt;%\n  select(patent_id, date)\n\nsetDT(patent_clean_tbl)\nclass(patent_clean_tbl)\n\n\ncombined_data_3_tbl &lt;- merge(x = patent_clean_tbl, y = combined_data_2_cleaned_tbl, \n                             by    = \"patent_id\", \n                             all.x = TRUE, \n                             all.y = FALSE)\n\n\ncombined_data_3_cleaned_tbl &lt;- combined_data_3_tbl %&gt;%\n  select(patent_id, type, date, organization, mainclass_id)\n\n\nsaveRDS(combined_data_3_cleaned_tbl, \"patent_3_cleaned_data_tbl.rds\")\n\n\nassignee_pa_p_uspc_data &lt;- readRDS(\"patent_3_cleaned_data_tbl.rds\")\n\nassignee_pa_p_uspc_data_tbl &lt;- as.data.table(assignee_pa_p_uspc_data)\n\n\nclean_try &lt;- assignee_pa_p_uspc_data[,year := lubridate::year(date)]\nsaveRDS(clean_try, \"patent_3_cleaned_data_with_year_tbl.rds\")"
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html#combination-of-the-data",
    "href": "content/01_journal/03_data_wrangling.html#combination-of-the-data",
    "title": "Data Wrangling",
    "section": "",
    "text": "#combination of assignee and patent_assignee datasets\nassignee_pa_data &lt;- readRDS(\"patent_1_cleaned_data_tbl.rds\")\nassignee_pa_data_tbl &lt;- as.data.table(assignee_pa_data)\nassignee_pa &lt;- assignee_pa_data_tbl[, .(COUNT = uniqueN(patent_id)), by = organization][order(-COUNT)]\nassignee_pa_clean &lt;- assignee_pa[-c(4)]\nassignment_1_result &lt;- head(assignee_pa_clean, 10)\nview(assignment_1_result)\nsaveRDS(assignment_1_result, \"result_1.rds\")\n\n\n\n#combination of assignee, patent_assignee, patent, and uspc datasets\n\nassignee_pa_p_uspc_with_year_data &lt;- readRDS(\"patent_3_cleaned_data_with_year_tbl.rds\")\nassignee_pa_p_uspc_data_with_year_tbl &lt;- as.data.table(assignee_pa_p_uspc_with_year_data)\nglimpse(assignee_pa_p_uspc_data_with_year_tbl)\nassignee_pa_p_uspc_final_tbl &lt;- assignee_pa_p_uspc_data_with_year_tbl[date &gt;= \"2014-08-01 & &lt;= 2014-08-31\", .(COUNT = uniqueN(patent_id)), by = organization][order(-COUNT)]\nassignee_pa_p_uspc_final_tbl\nassignee_pa_p_uspc_final_tbl_clean &lt;- assignee_pa_p_uspc_final_tbl[-c(1)]\nassignment_2_result &lt;- head(assignee_pa_p_uspc_final_tbl_clean, 10)\nassignment_2_result\nsaveRDS(assignment_2_result, \"result_2.rds\")\n\n\n\n#combination of assignee, patent_assignee, and uspc datasets\nassignee_pa_uspc_data &lt;- readRDS(\"patent_2_cleaned_data_tbl.rds\")\nassignee_pa_uspc_data_tbl &lt;- as.data.table(assignee_pa_uspc_data)\nglimpse(assignee_pa_uspc_data_tbl)\nassignee_pa_uspc_final_tbl &lt;- assignee_pa_uspc_data_tbl[, .(COUNT = uniqueN(patent_id)), by = .(organization, type)][order(-COUNT)]\n\n\nassignee_pa_uspc_clean &lt;- assignee_pa_uspc_final_tbl[-c(1)]\nassignment_3a_result &lt;- head(assignee_pa_uspc_clean, 10)\nassignment_3a_result\nsaveRDS(assignment_3a_result, \"result_3_1.rds\")\n\n\nassignee_pa_uspc_final_3b_tbl &lt;- assignee_pa_uspc_data_tbl[, .(COUNT = .N), by = type][order(-COUNT)]\nassignee_pa_uspc_3b_clean &lt;- assignee_pa_uspc_final_3b_tbl[-c(3)]\nassignment_3b_result &lt;- head(assignee_pa_uspc_3b_clean, 5)\nassignment_3b_result$patent_type &lt;- c(\"US Company or Corporation\", \"Foreign Company or Corporation\", \"US  Federal Government\", \"US Individual\", \"Foreign Individual\")\nassignment_3b_result\nsaveRDS(assignment_3b_result, \"result_3_2.rds\")"
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html#results",
    "href": "content/01_journal/03_data_wrangling.html#results",
    "title": "Data Wrangling",
    "section": "",
    "text": "#Question 1:\n#List the 10 US companies with the most assigned/granted patents\nresult_1&lt;- readRDS(\"result_1.rds\")\nprint(result_1)\n\n#Question 2:\n#List the top 10 companies with the most new granted patents for August 2014.\nresult_2 &lt;- readRDS(\"result_2.rds\")\nprint(result_2)\n\n#Question 3:\n#What is the most innovative tech sector? For the top 10 companies (worldwide) with the most patents\nresult_3_1 &lt;- readRDS(\"result_3_1.rds\")\nprint(result_3_1)\n\n#Top 5 USPTO tech main classes\nresult_3_2 &lt;- readRDS(\"result_3_2.rds\")\nprint(result_3_2)"
  },
  {
    "objectID": "content/01_journal/04_data_visualization.html",
    "href": "content/01_journal/04_data_visualization.html",
    "title": "Data Visualization",
    "section": "",
    "text": "##Load librarys\n\nlibrary(conflicted)\nlibrary(tidyverse)\nlibrary(future)\nlibrary(vroom)\nlibrary(data.table)\nlibrary(furrr)\nlibrary(tictoc)\nlibrary(readxl)\nlibrary(readr)\nlibrary(ggplot2)\nlibrary(\"ggthemes\")\nlibrary(dplyr)\nlibrary(lubridate)\nlibrary(plotly)\nlibrary(maps)\nconflicts_prefer(dplyr::filter)\n\n#&gt; [conflicted] Will prefer dplyr::filter over any other package.\n\nconflicts_prefer(lubridate::month)\n\n#&gt; [conflicted] Will prefer lubridate::month over any other package.\n\n\n\n\n\ncovid_data_tbl &lt;- read_csv(\"https://covid.ourworldindata.org/data/owid-covid-data.csv\")\n\n#&gt; Rows: 311568 Columns: 67\n#&gt; ── Column specification ────────────────────────────────────────────────────────\n#&gt; Delimiter: \",\"\n#&gt; chr   (4): iso_code, continent, location, tests_units\n#&gt; dbl  (62): total_cases, new_cases, new_cases_smoothed, total_deaths, new_dea...\n#&gt; date  (1): date\n#&gt; \n#&gt; ℹ Use `spec()` to retrieve the full column specification for this data.\n#&gt; ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ncummulative_covid_data_tbl &lt;- covid_data_tbl %&gt;%\n  mutate(month_name = lubridate::month(date, label = TRUE, abbr = FALSE)) %&gt;%\n  mutate(year = lubridate::year(date)) %&gt;%\n  select(year, month_name, total_cases, location) %&gt;%\n  filter(year %in% c(\"2022\")) %&gt;%\n  filter(location == 'Germany' | \n           location == 'United Kingdom' | \n           location == 'Spain' | \n           location == 'France' | \n           location == 'United States') %&gt;%\n  group_by(location, month_name) %&gt;%\n  summarize(all_cases = sum(total_cases)) %&gt;%\n  mutate(cummulative_cases = cumsum(all_cases)) %&gt;%\n  ungroup() %&gt;%\n  rename(Countries = location)\n\n#&gt; `summarise()` has grouped output by 'location'. You can override using the\n#&gt; `.groups` argument.\n\ncummulative_covid_data_tbl\n\n\n\n  \n\n\n\n\n\n\n\ncummulative_covid_data &lt;- as.data.frame(cummulative_covid_data_tbl)                \ncummulative_covid_data\n\n\n\n  \n\n\n  # Setup canvas\n  ggplot(cummulative_covid_data, aes(month_name, cummulative_cases)) +\n  \n  # Geometries\n  geom_line(aes(x     = month_name,\n                y     = cummulative_cases,\n                group = Countries,\n                color = Countries\n  ))+\n  \n  # Formatting  \n  scale_y_continuous(labels = scales::unit_format(scale = 1e-6,\n                                                  accuracy = 0.1,\n                                                  prefix = \"\",\n                                                  suffix = \"M\")) +\n  labs(\n    title = paste(\"COVID-19 confirmed cases worldwide\"),\n    subtitle = paste(\"As of 19/04/2022\"),\n    x = \"Year 2022\",\n    y = \"Cummulative Cases\"\n  ) +\n  \n  geom_smooth() +\n  theme_fivethirtyeight() +\n  \n  theme_minimal() +\n  \n  theme(\n    legend.position = \"bottom\",\n    plot.title = element_text(face=\"bold\"),\n    plot.caption = element_text(face = \"bold.italic\")\n  )\n\n#&gt; `geom_smooth()` using method = 'loess' and formula = 'y ~ x'"
  },
  {
    "objectID": "content/01_journal/04_data_visualization.html#get-data",
    "href": "content/01_journal/04_data_visualization.html#get-data",
    "title": "Data Visualization",
    "section": "",
    "text": "covid_data_tbl &lt;- read_csv(\"https://covid.ourworldindata.org/data/owid-covid-data.csv\")\n\n#&gt; Rows: 311568 Columns: 67\n#&gt; ── Column specification ────────────────────────────────────────────────────────\n#&gt; Delimiter: \",\"\n#&gt; chr   (4): iso_code, continent, location, tests_units\n#&gt; dbl  (62): total_cases, new_cases, new_cases_smoothed, total_deaths, new_dea...\n#&gt; date  (1): date\n#&gt; \n#&gt; ℹ Use `spec()` to retrieve the full column specification for this data.\n#&gt; ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ncummulative_covid_data_tbl &lt;- covid_data_tbl %&gt;%\n  mutate(month_name = lubridate::month(date, label = TRUE, abbr = FALSE)) %&gt;%\n  mutate(year = lubridate::year(date)) %&gt;%\n  select(year, month_name, total_cases, location) %&gt;%\n  filter(year %in% c(\"2022\")) %&gt;%\n  filter(location == 'Germany' | \n           location == 'United Kingdom' | \n           location == 'Spain' | \n           location == 'France' | \n           location == 'United States') %&gt;%\n  group_by(location, month_name) %&gt;%\n  summarize(all_cases = sum(total_cases)) %&gt;%\n  mutate(cummulative_cases = cumsum(all_cases)) %&gt;%\n  ungroup() %&gt;%\n  rename(Countries = location)\n\n#&gt; `summarise()` has grouped output by 'location'. You can override using the\n#&gt; `.groups` argument.\n\ncummulative_covid_data_tbl"
  },
  {
    "objectID": "content/01_journal/04_data_visualization.html#plot-data",
    "href": "content/01_journal/04_data_visualization.html#plot-data",
    "title": "Data Visualization",
    "section": "",
    "text": "cummulative_covid_data &lt;- as.data.frame(cummulative_covid_data_tbl)                \ncummulative_covid_data\n\n\n\n  \n\n\n  # Setup canvas\n  ggplot(cummulative_covid_data, aes(month_name, cummulative_cases)) +\n  \n  # Geometries\n  geom_line(aes(x     = month_name,\n                y     = cummulative_cases,\n                group = Countries,\n                color = Countries\n  ))+\n  \n  # Formatting  \n  scale_y_continuous(labels = scales::unit_format(scale = 1e-6,\n                                                  accuracy = 0.1,\n                                                  prefix = \"\",\n                                                  suffix = \"M\")) +\n  labs(\n    title = paste(\"COVID-19 confirmed cases worldwide\"),\n    subtitle = paste(\"As of 19/04/2022\"),\n    x = \"Year 2022\",\n    y = \"Cummulative Cases\"\n  ) +\n  \n  geom_smooth() +\n  theme_fivethirtyeight() +\n  \n  theme_minimal() +\n  \n  theme(\n    legend.position = \"bottom\",\n    plot.title = element_text(face=\"bold\"),\n    plot.caption = element_text(face = \"bold.italic\")\n  )\n\n#&gt; `geom_smooth()` using method = 'loess' and formula = 'y ~ x'"
  },
  {
    "objectID": "content/01_journal/04_data_visualization.html#plot-data-1",
    "href": "content/01_journal/04_data_visualization.html#plot-data-1",
    "title": "Data Visualization",
    "section": "2.1 Plot data",
    "text": "2.1 Plot data\n\nmortality_rate_tbl &lt;- covid_data_tbl %&gt;%\n  select(location, total_deaths, population) %&gt;%\n  group_by(location, population) %&gt;%\n  summarize(all_deaths = sum(total_deaths)) %&gt;%\n  ungroup() %&gt;%\n  mutate(mortality_rate = all_deaths/population) %&gt;%\n  mutate(across(location, str_replace_all, \"_\", \" \")) %&gt;%\n  \n  #Hint\n  mutate(location = case_when(\n\n    location == \"United Kingdom\" ~ \"UK\",\n    location == \"United States\" ~ \"USA\",\n    location == \"Democratic Republic of Congo\" ~ \"Democratic Republic of the Congo\",\n    TRUE ~ location\n\n  )) %&gt;%\n  #distinct()\n    \n  filter(!is.na(mortality_rate)) %&gt;%\n  rename(country = location) %&gt;%\n  select(country, mortality_rate)\n\n#&gt; `summarise()` has grouped output by 'location'. You can override using the\n#&gt; `.groups` argument.\n\n\n#&gt; Warning: There was 1 warning in `mutate()`.\n#&gt; ℹ In argument: `across(location, str_replace_all, \"_\", \" \")`.\n#&gt; Caused by warning:\n#&gt; ! The `...` argument of `across()` is deprecated as of dplyr 1.1.0.\n#&gt; Supply arguments directly to `.fns` through an anonymous function instead.\n#&gt; \n#&gt;   # Previously\n#&gt;   across(a:b, mean, na.rm = TRUE)\n#&gt; \n#&gt;   # Now\n#&gt;   across(a:b, \\(x) mean(x, na.rm = TRUE))\n\n#World Map\nworld &lt;- map_data(\"world\")\nmortality_rate_tbl %&gt;%\n  ggplot() +\n  geom_map(map = world,\n           aes(map_id = country, fill = mortality_rate)) +\n  expand_limits(x=world$long, y=world$lat) +\n  labs(\n    title = paste(\"Confirmed COVID-19 deaths relative to the size of the population\"),\n    subtitle = paste(\"Around 6.2 Million confirmed COVID-19 deaths worldwide\"),\n    fill = \"Mortality Rate\",\n    x = \"\",\n    y = \"\",\n    caption = \"Date: 04/16/2021\"\n  ) +\n  scale_fill_gradient(low='#FF0000',high='#800000', \n                      name='Mortality Rate') +\n  theme(legend.position = \"right\",\n        axis.text=element_blank(), \n        axis.text.x=element_blank(),\n        axis.ticks.x=element_blank(),\n        panel.background = element_blank())"
  },
  {
    "objectID": "content/02_notes/05_class_notes.html",
    "href": "content/02_notes/05_class_notes.html",
    "title": "Class Notes",
    "section": "",
    "text": "IMPORTANT: You can delete everything in here and start fresh. You might want to start by not deleting anything above this line until you know what that stuff is doing.\nThis is an .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header."
  },
  {
    "objectID": "content/03_other/06_links.html",
    "href": "content/03_other/06_links.html",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual .\n\n\n\n\nGoogle is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "content/03_other/06_links.html#r-and-r-studio",
    "href": "content/03_other/06_links.html#r-and-r-studio",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual ."
  },
  {
    "objectID": "content/03_other/06_links.html#additional-r-resources",
    "href": "content/03_other/06_links.html#additional-r-resources",
    "title": "Links",
    "section": "",
    "text": "Google is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Lab Journal",
    "section": "",
    "text": "This is a template example for lab journaling. Students in the data science courses at the Institute of Entrepreneurship will use this template to learn R for business analytics. Students can replace this text as they wish."
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "My Lab Journal",
    "section": "How to use",
    "text": "How to use\n\nAccept the assignment and get your own github repo.\nBlog/journal what you are doing in R, by editing the .qmd files.\nSee the links page for lots of helpful links on learning R.\nChange everything to make it your own.\nMake sure to render you website everytime before you want to upload changes"
  }
]